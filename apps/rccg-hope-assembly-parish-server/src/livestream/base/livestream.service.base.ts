/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Livestream as PrismaLivestream,
  Event as PrismaEvent,
} from "@prisma/client";

export class LivestreamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LivestreamCountArgs, "select">
  ): Promise<number> {
    return this.prisma.livestream.count(args);
  }

  async livestreams<T extends Prisma.LivestreamFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LivestreamFindManyArgs>
  ): Promise<PrismaLivestream[]> {
    return this.prisma.livestream.findMany<Prisma.LivestreamFindManyArgs>(args);
  }
  async livestream<T extends Prisma.LivestreamFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LivestreamFindUniqueArgs>
  ): Promise<PrismaLivestream | null> {
    return this.prisma.livestream.findUnique(args);
  }
  async createLivestream<T extends Prisma.LivestreamCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LivestreamCreateArgs>
  ): Promise<PrismaLivestream> {
    return this.prisma.livestream.create<T>(args);
  }
  async updateLivestream<T extends Prisma.LivestreamUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LivestreamUpdateArgs>
  ): Promise<PrismaLivestream> {
    return this.prisma.livestream.update<T>(args);
  }
  async deleteLivestream<T extends Prisma.LivestreamDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LivestreamDeleteArgs>
  ): Promise<PrismaLivestream> {
    return this.prisma.livestream.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.livestream
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
